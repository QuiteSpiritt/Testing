using OpenQA.Selenium;

namespace PageObjects
{
	public class LoginPage
	{
		private readonly IWebDriver _driver;

		public LoginPage(IWebDriver driver)
		{
			_driver = driver;
		}

		private IWebElement UserNameField => _driver.FindElement(By.Id("user-name"));
		private IWebElement PasswordField => _driver.FindElement(By.Id("password"));
		private IWebElement LoginButton => _driver.FindElement(By.Id("login-button"));

		public void Login(string username, string password)
		{
			UserNameField.SendKeys(username);
			PasswordField.SendKeys(password);
			LoginButton.Click();
		}
	}
}
using OpenQA.Selenium;

namespace PageObjects
{
	public class ProductPage
	{
		private readonly IWebDriver _driver;

		public ProductPage(IWebDriver driver)
		{
			_driver = driver;
		}

		private IWebElement Title => _driver.FindElement(By.ClassName("title"));
		private IWebElement AddToCartButton => _driver.FindElement(By.Id("add-to-cart-sauce-labs-backpack"));
		private IWebElement CartButton => _driver.FindElement(By.ClassName("shopping_cart_link"));

		public bool IsLoaded()
		{
			return Title.Text.ToLower().Contains("products");
		}

		public void AddProductToCart()
		{
			AddToCartButton.Click();
		}

		public void GoToCart()
		{
			CartButton.Click();
		}
	}
}
using OpenQA.Selenium;
using System.Collections.Generic;

namespace PageObjects
{
	public class CartPage
	{
		private readonly IWebDriver _driver;

		public CartPage(IWebDriver driver)
		{
			_driver = driver;
		}

		private IWebElement RemoveButton => _driver.FindElement(By.Id("remove-sauce-labs-backpack"));
		private IReadOnlyCollection<IWebElement> CartItems => _driver.FindElements(By.ClassName("cart_item"));

		public void RemoveProductFromCart()
		{
			RemoveButton.Click();
		}

		public bool IsCartEmpty()
		{
			return CartItems.Count == 0;
		}
	}
}
Feature: Login and Cart Management

  Scenario Outline: Login to website, add item to cart, and remove it
    Given I navigate to the login page
    When I have filled up the following
      | Username       | Password       |
      | <Username>     | <Password>     |
    Then I should be redirected to the product page

    When I add a "sauce-labs-backpack" to the cart
    And I go to the cart
    Then the cart should contain 1 item

    When I remove the "sauce-labs-backpack" from the cart
    Then the cart should be empty

    Examples:
      | Username       | Password       |
      | problem_user   | secret_sauce   |

using Microsoft.VisualStudio.TestTools.UnitTesting;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using System;
using System.Threading; // Додано для Thread.Sleep
using TechTalk.SpecFlow;
using PageObjects;
using TechTalk.SpecFlow.Assist;


namespace TestWebLab2.Steps
{
	[Binding]
	public class LoginAndCartSteps
	{
		private IWebDriver driver;
		private LoginPage loginPage;
		private ProductPage productsPage;
		private CartPage cartPage;

		[BeforeScenario]
		public void SetUp()
		{
			driver = new ChromeDriver("E:\\University\\chromedriver.exe");
			driver.Manage().Window.Maximize();
			driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(1);

			loginPage = new LoginPage(driver);
			productsPage = new ProductPage(driver);
			cartPage = new CartPage(driver);
		}

		[AfterScenario]
		public void TearDown()
		{
			driver.Quit();
		}

		[Given(@"I navigate to the login page")]
		public void GivenINavigateToTheLoginPage()
		{
			driver.Navigate().GoToUrl("https://www.saucedemo.com/");
		}

		[When(@"I have filled up the following")]
		public void WhenIHaveFilledUpTheFollowing(Table table)
		{
			var loginData = table.CreateInstance<LoginData>();
			loginPage.Login(loginData.Username, loginData.Password);
			Thread.Sleep(1000); 
		}

		[Then(@"I should be redirected to the product page")]
		public void ThenIShouldBeRedirectedToTheProductPage()
		{
			Assert.IsTrue(productsPage.IsLoaded(), "&Не вдалося завантажити сторінку продуктів");
		}

		[When(@"I add a ""(.*)"" to the cart")]
		public void WhenIAddAProductToTheCart(string productId)
		{
			productsPage.AddProductToCart();
			Thread.Sleep(1000); 
		}

		[When(@"I go to the cart")]
		public void WhenIGoToTheCart()
		{
			productsPage.GoToCart();
			Thread.Sleep(1000); 
		}

		[Then(@"the cart should contain (.*) item")]
		public void ThenTheCartShouldContainItem(int itemCount)
		{
			Assert.IsTrue(cartPage.IsCartEmpty() == (itemCount == 0), "&Кількість товарів у кошику не відповідає очікуваній");
		}

		[When(@"I remove the ""(.*)"" from the cart")]
		public void WhenIRemoveTheProductFromTheCart(string productId)
		{
			cartPage.RemoveProductFromCart();
			Thread.Sleep(1000); 
		}

		[Then(@"the cart should be empty")]
		public void ThenTheCartShouldBeEmpty()
		{
			Assert.IsTrue(cartPage.IsCartEmpty(), "&Кошик не порожній після видалення товару");
		}

		// Допоміжний клас для зберігання даних логіна і пароля
		public class LoginData
		{
			public string Username { get; set; }
			public string Password { get; set; }
		}
	}
}
